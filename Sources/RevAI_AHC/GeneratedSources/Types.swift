// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get Job By Id
    ///
    /// Returns information about a transcription job
    ///
    /// - Remark: HTTP `GET /jobs/{id}`.
    /// - Remark: Generated from `#/paths//jobs/{id}/get(GetJobById)`.
    func GetJobById(_ input: Operations.GetJobById.Input) async throws -> Operations.GetJobById.Output
    /// Delete Job by Id
    ///
    /// Deletes a transcription job. All data related to the job, such as input media and transcript, will be permanently deleted. A job can only be deleted once it's completed (either with success or failure).
    ///
    /// - Remark: HTTP `DELETE /jobs/{id}`.
    /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)`.
    func DeleteJobById(_ input: Operations.DeleteJobById.Input) async throws -> Operations.DeleteJobById.Output
    /// Get List of Jobs
    ///
    /// Gets a list of transcription jobs submitted within the last 30 days in reverse chronological order up to the provided `limit` number of jobs per call. **Note:** Jobs older than 30 days will not be listed. Pagination is supported via passing the last job `id` from a previous call into `starting_after`.
    ///
    /// - Remark: HTTP `GET /jobs`.
    /// - Remark: Generated from `#/paths//jobs/get(GetListOfJobs)`.
    func GetListOfJobs(_ input: Operations.GetListOfJobs.Input) async throws -> Operations.GetListOfJobs.Output
    /// Submit Transcription Job
    ///
    /// Starts an asynchronous job to transcribe speech-to-text for a media file. Media files can be specified in two ways, either by including a public url to the media in the transcription job `options` or by uploading a local file as part of a multipart/form request.
    ///
    /// - Remark: HTTP `POST /jobs`.
    /// - Remark: Generated from `#/paths//jobs/post(SubmitTranscriptionJob)`.
    func SubmitTranscriptionJob(_ input: Operations.SubmitTranscriptionJob.Input) async throws -> Operations.SubmitTranscriptionJob.Output
    /// Get Transcript By Id
    ///
    /// Returns the transcript for a completed transcription job. Transcript can be returned as either JSON or plaintext format. Transcript output format can be specified in the `Accept` header. Returns JSON by default.
    /// ***
    /// Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete transcript. This is rare, but not impossible. To guarantee 100% completeness, we recommend capturing all final hypothesis when you receive them on the client.
    ///
    ///
    /// - Remark: HTTP `GET /jobs/{id}/transcript`.
    /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)`.
    func GetTranscriptById(_ input: Operations.GetTranscriptById.Input) async throws -> Operations.GetTranscriptById.Output
    /// Get Captions
    ///
    /// Returns the caption output for a transcription job. We currently support SubRip (SRT) and Web Video Text Tracks (VTT) output.
    /// Caption output format can be specified in the `Accept` header. Returns SRT by default.
    /// ***
    /// Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete caption file. This is rare, but not impossible.
    ///
    ///
    /// - Remark: HTTP `GET /jobs/{id}/captions`.
    /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)`.
    func GetCaptions(_ input: Operations.GetCaptions.Input) async throws -> Operations.GetCaptions.Output
    /// Get Account
    ///
    /// Get the developer's account information
    ///
    /// - Remark: HTTP `GET /account`.
    /// - Remark: Generated from `#/paths//account/get(GetAccount)`.
    func GetAccount(_ input: Operations.GetAccount.Input) async throws -> Operations.GetAccount.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get Job By Id
    ///
    /// Returns information about a transcription job
    ///
    /// - Remark: HTTP `GET /jobs/{id}`.
    /// - Remark: Generated from `#/paths//jobs/{id}/get(GetJobById)`.
    public func GetJobById(
        path: Operations.GetJobById.Input.Path,
        headers: Operations.GetJobById.Input.Headers = .init()
    ) async throws -> Operations.GetJobById.Output {
        try await GetJobById(Operations.GetJobById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete Job by Id
    ///
    /// Deletes a transcription job. All data related to the job, such as input media and transcript, will be permanently deleted. A job can only be deleted once it's completed (either with success or failure).
    ///
    /// - Remark: HTTP `DELETE /jobs/{id}`.
    /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)`.
    public func DeleteJobById(
        path: Operations.DeleteJobById.Input.Path,
        headers: Operations.DeleteJobById.Input.Headers = .init()
    ) async throws -> Operations.DeleteJobById.Output {
        try await DeleteJobById(Operations.DeleteJobById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get List of Jobs
    ///
    /// Gets a list of transcription jobs submitted within the last 30 days in reverse chronological order up to the provided `limit` number of jobs per call. **Note:** Jobs older than 30 days will not be listed. Pagination is supported via passing the last job `id` from a previous call into `starting_after`.
    ///
    /// - Remark: HTTP `GET /jobs`.
    /// - Remark: Generated from `#/paths//jobs/get(GetListOfJobs)`.
    public func GetListOfJobs(
        query: Operations.GetListOfJobs.Input.Query = .init(),
        headers: Operations.GetListOfJobs.Input.Headers = .init()
    ) async throws -> Operations.GetListOfJobs.Output {
        try await GetListOfJobs(Operations.GetListOfJobs.Input(
            query: query,
            headers: headers
        ))
    }
    /// Submit Transcription Job
    ///
    /// Starts an asynchronous job to transcribe speech-to-text for a media file. Media files can be specified in two ways, either by including a public url to the media in the transcription job `options` or by uploading a local file as part of a multipart/form request.
    ///
    /// - Remark: HTTP `POST /jobs`.
    /// - Remark: Generated from `#/paths//jobs/post(SubmitTranscriptionJob)`.
    public func SubmitTranscriptionJob(
        headers: Operations.SubmitTranscriptionJob.Input.Headers = .init(),
        body: Operations.SubmitTranscriptionJob.Input.Body
    ) async throws -> Operations.SubmitTranscriptionJob.Output {
        try await SubmitTranscriptionJob(Operations.SubmitTranscriptionJob.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get Transcript By Id
    ///
    /// Returns the transcript for a completed transcription job. Transcript can be returned as either JSON or plaintext format. Transcript output format can be specified in the `Accept` header. Returns JSON by default.
    /// ***
    /// Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete transcript. This is rare, but not impossible. To guarantee 100% completeness, we recommend capturing all final hypothesis when you receive them on the client.
    ///
    ///
    /// - Remark: HTTP `GET /jobs/{id}/transcript`.
    /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)`.
    public func GetTranscriptById(
        path: Operations.GetTranscriptById.Input.Path,
        headers: Operations.GetTranscriptById.Input.Headers = .init()
    ) async throws -> Operations.GetTranscriptById.Output {
        try await GetTranscriptById(Operations.GetTranscriptById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get Captions
    ///
    /// Returns the caption output for a transcription job. We currently support SubRip (SRT) and Web Video Text Tracks (VTT) output.
    /// Caption output format can be specified in the `Accept` header. Returns SRT by default.
    /// ***
    /// Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete caption file. This is rare, but not impossible.
    ///
    ///
    /// - Remark: HTTP `GET /jobs/{id}/captions`.
    /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)`.
    public func GetCaptions(
        path: Operations.GetCaptions.Input.Path,
        query: Operations.GetCaptions.Input.Query = .init(),
        headers: Operations.GetCaptions.Input.Headers = .init()
    ) async throws -> Operations.GetCaptions.Output {
        try await GetCaptions(Operations.GetCaptions.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get Account
    ///
    /// Get the developer's account information
    ///
    /// - Remark: HTTP `GET /account`.
    /// - Remark: Generated from `#/paths//account/get(GetAccount)`.
    public func GetAccount(headers: Operations.GetAccount.Input.Headers = .init()) async throws -> Operations.GetAccount.Output {
        try await GetAccount(Operations.GetAccount.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Rev AI API
    public enum Server1 {
        /// Rev AI API
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.rev.ai/speechtotext/v1",
                variables: []
            )
        }
    }
    /// Rev AI API
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.rev.ai/speechtotext/v1",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Current status of the job
        ///
        /// - Remark: Generated from `#/components/schemas/AudioAnalysisStatusField`.
        @frozen public enum AudioAnalysisStatusField: String, Codable, Hashable, Sendable, CaseIterable {
            case in_progress = "in_progress"
            case transcribed = "transcribed"
            case failed = "failed"
        }
        /// The date and time the job was created in ISO-8601 UTC form.
        ///
        /// - Remark: Generated from `#/components/schemas/CreatedOnField`.
        public typealias CreatedOnField = Foundation.Date
        /// The date and time the job was completed, whether successfully or failing, in ISO-8601 UTC form.
        ///
        /// - Remark: Generated from `#/components/schemas/CompletedOnField`.
        public typealias CompletedOnField = Foundation.Date
        /// Optional metadata that was provided during job submission.
        ///
        /// - Remark: Generated from `#/components/schemas/MetadataField`.
        public typealias MetadataField = Swift.String
        /// Name of the file provided. Present when the file name is available
        ///
        /// - Remark: Generated from `#/components/schemas/FileNameField`.
        public typealias FileNameField = Swift.String
        /// Duration of the file in seconds. Null if the file could not be retrieved or there was not a valid media file
        ///
        /// - Remark: Generated from `#/components/schemas/FileDurationSecondsField`.
        public typealias FileDurationSecondsField = Swift.Double
        /// Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions
        ///
        /// - Remark: Generated from `#/components/schemas/AudioAnalysisFailureField`.
        @frozen public enum AudioAnalysisFailureField: String, Codable, Hashable, Sendable, CaseIterable {
            case internal_processing = "internal_processing"
            case download_failure = "download_failure"
            case duration_exceeded = "duration_exceeded"
            case duration_too_short = "duration_too_short"
            case invalid_media = "invalid_media"
            case empty_media = "empty_media"
            case transcription = "transcription"
            case insufficient_balance = "insufficient_balance"
            case invoicing_limit_exceeded = "invoicing_limit_exceeded"
            case custom_vocabulary = "custom_vocabulary"
        }
        /// Human-readable reason why the job failed.
        ///
        /// - Remark: Generated from `#/components/schemas/FailureDetailField`.
        public typealias FailureDetailField = Swift.String
        /// Callback url provided by the user.
        ///
        /// - Remark: Generated from `#/components/schemas/CallbackUrlField`.
        public typealias CallbackUrlField = Swift.String
        /// Media url provided by the job submission. Null if the job was provided using a local file.
        ///
        /// - Remark: Generated from `#/components/schemas/MediaUrlField`.
        public typealias MediaUrlField = Swift.String
        /// Amount of time after job completion when job is auto-deleted. Present only when preference set in job request.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteAfterSecondsField`.
        public typealias DeleteAfterSecondsField = Swift.Int
        /// - Remark: Generated from `#/components/schemas/OptionalFlagField`.
        public typealias OptionalFlagField = Swift.Bool
        /// User-supplied custom vocabulary ID to be used with job for transcription.
        ///
        /// - Remark: Generated from `#/components/schemas/CustomVocabularyIdField`.
        public typealias CustomVocabularyIdField = Swift.String
        /// User-supplied number of speaker channels in the audio.
        ///
        /// - Remark: Generated from `#/components/schemas/SpeakerChannelsCountField`.
        public typealias SpeakerChannelsCountField = Swift.Int
        /// User-supplied language to transcribe the audio into.
        ///
        /// - Remark: Generated from `#/components/schemas/AsyncLanguageField`.
        @frozen public enum AsyncLanguageField: String, Codable, Hashable, Sendable, CaseIterable {
            case en = "en"
            case ar = "ar"
            case bg = "bg"
            case ca = "ca"
            case cmn = "cmn"
            case cs = "cs"
            case da = "da"
            case de = "de"
            case el = "el"
            case es = "es"
            case fa = "fa"
            case fi = "fi"
            case fr = "fr"
            case he = "he"
            case hi = "hi"
            case hr = "hr"
            case hu = "hu"
            case id = "id"
            case it = "it"
            case ja = "ja"
            case ko = "ko"
            case lt = "lt"
            case lv = "lv"
            case ms = "ms"
            case nl = "nl"
            case no = "no"
            case pl = "pl"
            case pt = "pt"
            case ro = "ro"
            case ru = "ru"
            case sk = "sk"
            case sl = "sl"
            case sv = "sv"
            case ta = "ta"
            case te = "te"
            case tr = "tr"
        }
        /// User-supplied transcriber to transcribe the audio file.
        ///
        /// - Remark: Generated from `#/components/schemas/TranscriberField`.
        @frozen public enum TranscriberField: String, Codable, Hashable, Sendable, CaseIterable {
            case machine = "machine"
            case human = "human"
            case machine_v2 = "machine_v2"
        }
        /// Rev AI Transcription Job
        /// ***
        /// Note: properties are not displayed in the returned object if they are null
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob`.
        public struct AsyncTranscriptionJob: Codable, Hashable, Sendable {
            /// Id of the job
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/status`.
            public var status: Components.Schemas.AudioAnalysisStatusField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/created_on`.
            public var created_on: Components.Schemas.CreatedOnField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/completed_on`.
            public var completed_on: Components.Schemas.CompletedOnField?
            /// Optional metadata that was provided during job submission
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/metadata/value1`.
                public var value1: Components.Schemas.MetadataField
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.MetadataField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(value1)
                }
            }
            /// Optional metadata that was provided during job submission
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/metadata`.
            public var metadata: Components.Schemas.AsyncTranscriptionJob.metadataPayload?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/name`.
            public var name: Components.Schemas.FileNameField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/duration_seconds`.
            public var duration_seconds: Components.Schemas.FileDurationSecondsField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/failure`.
            public var failure: Components.Schemas.AudioAnalysisFailureField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/failure_detail`.
            public struct failure_detailPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/failure_detail/value1`.
                public var value1: Components.Schemas.FailureDetailField
                /// Creates a new `failure_detailPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.FailureDetailField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(value1)
                }
            }
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/failure_detail`.
            public var failure_detail: Components.Schemas.AsyncTranscriptionJob.failure_detailPayload?
            /// Type of speech recognition performed.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case async = "async"
            }
            /// Type of speech recognition performed.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/type`.
            public var _type: Components.Schemas.AsyncTranscriptionJob._typePayload?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/callback_url`.
            public var callback_url: Components.Schemas.CallbackUrlField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/media_url`.
            public var media_url: Components.Schemas.MediaUrlField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/delete_after_seconds`.
            public var delete_after_seconds: Components.Schemas.DeleteAfterSecondsField?
            /// User-supplied preference on whether to skip diarization.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/skip_diarization`.
            public struct skip_diarizationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/skip_diarization/value1`.
                public var value1: Components.Schemas.OptionalFlagField
                /// Creates a new `skip_diarizationPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.OptionalFlagField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(value1)
                }
            }
            /// User-supplied preference on whether to skip diarization.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/skip_diarization`.
            public var skip_diarization: Components.Schemas.AsyncTranscriptionJob.skip_diarizationPayload?
            /// User-supplied preference on whether to skip punctuation.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/skip_punctuation`.
            public struct skip_punctuationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/skip_punctuation/value1`.
                public var value1: Components.Schemas.OptionalFlagField
                /// Creates a new `skip_punctuationPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.OptionalFlagField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(value1)
                }
            }
            /// User-supplied preference on whether to skip punctuation.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/skip_punctuation`.
            public var skip_punctuation: Components.Schemas.AsyncTranscriptionJob.skip_punctuationPayload?
            /// User-supplied preference on whether to remove disfluencies.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/remove_disfluencies`.
            public struct remove_disfluenciesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/remove_disfluencies/value1`.
                public var value1: Components.Schemas.OptionalFlagField
                /// Creates a new `remove_disfluenciesPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.OptionalFlagField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(value1)
                }
            }
            /// User-supplied preference on whether to remove disfluencies.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/remove_disfluencies`.
            public var remove_disfluencies: Components.Schemas.AsyncTranscriptionJob.remove_disfluenciesPayload?
            /// User-supplied preference on whether to remove explicit words.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/filter_profanity`.
            public struct filter_profanityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/filter_profanity/value1`.
                public var value1: Components.Schemas.OptionalFlagField
                /// Creates a new `filter_profanityPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.OptionalFlagField) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(value1)
                }
            }
            /// User-supplied preference on whether to remove explicit words.
            ///
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/filter_profanity`.
            public var filter_profanity: Components.Schemas.AsyncTranscriptionJob.filter_profanityPayload?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/custom_vocabulary_id`.
            public var custom_vocabulary_id: Components.Schemas.CustomVocabularyIdField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/speaker_channels_count`.
            public var speaker_channels_count: Components.Schemas.SpeakerChannelsCountField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/language`.
            public var language: Components.Schemas.AsyncLanguageField?
            /// - Remark: Generated from `#/components/schemas/AsyncTranscriptionJob/transcriber`.
            public var transcriber: Components.Schemas.TranscriberField?
            /// Creates a new `AsyncTranscriptionJob`.
            ///
            /// - Parameters:
            ///   - id: Id of the job
            ///   - status:
            ///   - created_on:
            ///   - completed_on:
            ///   - metadata: Optional metadata that was provided during job submission
            ///   - name:
            ///   - duration_seconds:
            ///   - failure:
            ///   - failure_detail:
            ///   - _type: Type of speech recognition performed.
            ///   - callback_url:
            ///   - media_url:
            ///   - delete_after_seconds:
            ///   - skip_diarization: User-supplied preference on whether to skip diarization.
            ///   - skip_punctuation: User-supplied preference on whether to skip punctuation.
            ///   - remove_disfluencies: User-supplied preference on whether to remove disfluencies.
            ///   - filter_profanity: User-supplied preference on whether to remove explicit words.
            ///   - custom_vocabulary_id:
            ///   - speaker_channels_count:
            ///   - language:
            ///   - transcriber:
            public init(
                id: Swift.String? = nil,
                status: Components.Schemas.AudioAnalysisStatusField? = nil,
                created_on: Components.Schemas.CreatedOnField? = nil,
                completed_on: Components.Schemas.CompletedOnField? = nil,
                metadata: Components.Schemas.AsyncTranscriptionJob.metadataPayload? = nil,
                name: Components.Schemas.FileNameField? = nil,
                duration_seconds: Components.Schemas.FileDurationSecondsField? = nil,
                failure: Components.Schemas.AudioAnalysisFailureField? = nil,
                failure_detail: Components.Schemas.AsyncTranscriptionJob.failure_detailPayload? = nil,
                _type: Components.Schemas.AsyncTranscriptionJob._typePayload? = nil,
                callback_url: Components.Schemas.CallbackUrlField? = nil,
                media_url: Components.Schemas.MediaUrlField? = nil,
                delete_after_seconds: Components.Schemas.DeleteAfterSecondsField? = nil,
                skip_diarization: Components.Schemas.AsyncTranscriptionJob.skip_diarizationPayload? = nil,
                skip_punctuation: Components.Schemas.AsyncTranscriptionJob.skip_punctuationPayload? = nil,
                remove_disfluencies: Components.Schemas.AsyncTranscriptionJob.remove_disfluenciesPayload? = nil,
                filter_profanity: Components.Schemas.AsyncTranscriptionJob.filter_profanityPayload? = nil,
                custom_vocabulary_id: Components.Schemas.CustomVocabularyIdField? = nil,
                speaker_channels_count: Components.Schemas.SpeakerChannelsCountField? = nil,
                language: Components.Schemas.AsyncLanguageField? = nil,
                transcriber: Components.Schemas.TranscriberField? = nil
            ) {
                self.id = id
                self.status = status
                self.created_on = created_on
                self.completed_on = completed_on
                self.metadata = metadata
                self.name = name
                self.duration_seconds = duration_seconds
                self.failure = failure
                self.failure_detail = failure_detail
                self._type = _type
                self.callback_url = callback_url
                self.media_url = media_url
                self.delete_after_seconds = delete_after_seconds
                self.skip_diarization = skip_diarization
                self.skip_punctuation = skip_punctuation
                self.remove_disfluencies = remove_disfluencies
                self.filter_profanity = filter_profanity
                self.custom_vocabulary_id = custom_vocabulary_id
                self.speaker_channels_count = speaker_channels_count
                self.language = language
                self.transcriber = transcriber
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case status
                case created_on
                case completed_on
                case metadata
                case name
                case duration_seconds
                case failure
                case failure_detail
                case _type = "type"
                case callback_url
                case media_url
                case delete_after_seconds
                case skip_diarization
                case skip_punctuation
                case remove_disfluencies
                case filter_profanity
                case custom_vocabulary_id
                case speaker_channels_count
                case language
                case transcriber
            }
        }
        /// Problem details object returned on errors
        ///
        /// - Remark: Generated from `#/components/schemas/BaseProblemDetails`.
        public struct BaseProblemDetails: Codable, Hashable, Sendable {
            /// Short, human-readable summary of the problem type
            ///
            /// - Remark: Generated from `#/components/schemas/BaseProblemDetails/title`.
            public var title: Swift.String?
            /// URI that identifies the problem
            ///
            /// - Remark: Generated from `#/components/schemas/BaseProblemDetails/type`.
            public var _type: Swift.String?
            /// HTTP status code of the error
            ///
            /// - Remark: Generated from `#/components/schemas/BaseProblemDetails/status`.
            public var status: Swift.Int?
            /// Creates a new `BaseProblemDetails`.
            ///
            /// - Parameters:
            ///   - title: Short, human-readable summary of the problem type
            ///   - _type: URI that identifies the problem
            ///   - status: HTTP status code of the error
            public init(
                title: Swift.String? = nil,
                _type: Swift.String? = nil,
                status: Swift.Int? = nil
            ) {
                self.title = title
                self._type = _type
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case _type = "type"
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidStateDetails`.
        public struct InvalidStateDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InvalidStateDetails/value1`.
            public var value1: Components.Schemas.BaseProblemDetails
            /// - Remark: Generated from `#/components/schemas/InvalidStateDetails/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// Value passed in given request
                ///
                /// - Remark: Generated from `#/components/schemas/InvalidStateDetails/value2/current_value`.
                public var current_value: Swift.String?
                /// Allowed values for this request
                ///
                /// - Remark: Generated from `#/components/schemas/InvalidStateDetails/value2/allowed_values`.
                public var allowed_values: [Swift.String]?
                /// Human-readable explanation specific to this occurrence of the problem
                ///
                /// - Remark: Generated from `#/components/schemas/InvalidStateDetails/value2/detail`.
                public var detail: Swift.String?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - current_value: Value passed in given request
                ///   - allowed_values: Allowed values for this request
                ///   - detail: Human-readable explanation specific to this occurrence of the problem
                public init(
                    current_value: Swift.String? = nil,
                    allowed_values: [Swift.String]? = nil,
                    detail: Swift.String? = nil
                ) {
                    self.current_value = current_value
                    self.allowed_values = allowed_values
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case current_value
                    case allowed_values
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/InvalidStateDetails/value2`.
            public var value2: Components.Schemas.InvalidStateDetails.Value2Payload
            /// Creates a new `InvalidStateDetails`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.BaseProblemDetails,
                value2: Components.Schemas.InvalidStateDetails.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/BadRequestProblemDetails`.
        public struct BadRequestProblemDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BadRequestProblemDetails/value1`.
            public var value1: Components.Schemas.BaseProblemDetails
            /// - Remark: Generated from `#/components/schemas/BadRequestProblemDetails/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// Invalid properties object where each property is the key, mapped to a list of reasons why the property is invalid
                ///
                /// - Remark: Generated from `#/components/schemas/BadRequestProblemDetails/value2/parameters`.
                public struct parametersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `parametersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Invalid properties object where each property is the key, mapped to a list of reasons why the property is invalid
                ///
                /// - Remark: Generated from `#/components/schemas/BadRequestProblemDetails/value2/parameters`.
                public var parameters: Components.Schemas.BadRequestProblemDetails.Value2Payload.parametersPayload?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - parameters: Invalid properties object where each property is the key, mapped to a list of reasons why the property is invalid
                public init(parameters: Components.Schemas.BadRequestProblemDetails.Value2Payload.parametersPayload? = nil) {
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case parameters
                }
            }
            /// - Remark: Generated from `#/components/schemas/BadRequestProblemDetails/value2`.
            public var value2: Components.Schemas.BadRequestProblemDetails.Value2Payload
            /// Creates a new `BadRequestProblemDetails`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.BaseProblemDetails,
                value2: Components.Schemas.BadRequestProblemDetails.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// **Only available for `human` transcriber option** When this field is set to true
        /// the transcriber will transcribe every syllable. This will include all false starts,
        /// and disfluencies in the transcript.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/VerbatimField`.
        public struct VerbatimField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VerbatimField/value1`.
            public var value1: Components.Schemas.OptionalFlagField
            /// Creates a new `VerbatimField`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.OptionalFlagField) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                value1 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(value1)
            }
        }
        /// **Only available for `human` transcriber option** When this field is set to true
        /// your job is given higher priority and will be worked on sooner by our human transcribers.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RushField`.
        public struct RushField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RushField/value1`.
            public var value1: Components.Schemas.OptionalFlagField
            /// Creates a new `RushField`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.OptionalFlagField) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                value1 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(value1)
            }
        }
        /// **Only available for `human` transcriber option** When this field is set to true
        /// the behavior will mock a normal human transcription job except no transcription will
        /// happen. The primary use case is to test integrations without being charged for human
        /// transcription.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TestModeField`.
        public struct TestModeField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TestModeField/value1`.
            public var value1: Components.Schemas.OptionalFlagField
            /// Creates a new `TestModeField`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.OptionalFlagField) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                value1 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(value1)
            }
        }
        /// - Remark: Generated from `#/components/schemas/SegmentsToTranscribeField`.
        public struct SegmentsToTranscribeFieldPayload: Codable, Hashable, Sendable {
            /// The timestamp of the beginning of the segment relative to the beginning of the audio in seconds (centisecond precision)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SegmentsToTranscribeField/start`.
            public var start: Swift.Double?
            /// The timestamp of the end of the segment relative to the beginning of the audio in seconds (centisecond precision)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SegmentsToTranscribeField/end`.
            public var end: Swift.Double?
            /// Creates a new `SegmentsToTranscribeFieldPayload`.
            ///
            /// - Parameters:
            ///   - start: The timestamp of the beginning of the segment relative to the beginning of the audio in seconds (centisecond precision)
            ///   - end: The timestamp of the end of the segment relative to the beginning of the audio in seconds (centisecond precision)
            public init(
                start: Swift.Double? = nil,
                end: Swift.Double? = nil
            ) {
                self.start = start
                self.end = end
            }
            public enum CodingKeys: String, CodingKey {
                case start
                case end
            }
        }
        /// **Only available for `human` transcriber option**. Use this option to specify which
        /// sections of the transcript need to be transcribed. Segments must be at least two minutes
        /// in length and cannot overlap.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/SegmentsToTranscribeField`.
        public typealias SegmentsToTranscribeField = [Components.Schemas.SegmentsToTranscribeFieldPayload]
        /// - Remark: Generated from `#/components/schemas/SpeakerNamesField`.
        public struct SpeakerNamesFieldPayload: Codable, Hashable, Sendable {
            /// The name of the speaker to be used when labeling monologues. Max of 50 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SpeakerNamesField/display_name`.
            public var display_name: Swift.String
            /// Creates a new `SpeakerNamesFieldPayload`.
            ///
            /// - Parameters:
            ///   - display_name: The name of the speaker to be used when labeling monologues. Max of 50 characters.
            public init(display_name: Swift.String) {
                self.display_name = display_name
            }
            public enum CodingKeys: String, CodingKey {
                case display_name
            }
        }
        /// **Only available for `human` transcriber option**. Use this option to specify up to 100 names of speakers in
        /// the transcript. Names may only be up to 50 characters long.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/SpeakerNamesField`.
        public typealias SpeakerNamesField = [Components.Schemas.SpeakerNamesFieldPayload]
        /// Contains a collection of phrases. Custom vocabulary informs and biases the speech recognition to find those phrases (at the cost of slightly slower transcription).
        ///
        /// - Remark: Generated from `#/components/schemas/CustomVocabulariesField`.
        public struct CustomVocabulariesFieldPayload: Codable, Hashable, Sendable {
            /// Array of phrases not found in normal dictionary. Add technical jargon, proper nouns and uncommon phrases as strings in this array to add them to the lexicon for this job.
            ///
            /// A phrase must contain at least 1 alpha character but may contain any non-numeric character from the Basic Latin set. A phrase can contain up to 12 words. Each word can contain up to 34 characters.
            ///
            /// **Note**: Only 6000 phrases can be used per transcription job. For more details, check [Custom Vocabularies](https://www.rev.ai/docs/overview#section/Features/Custom-Vocabularies).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CustomVocabulariesField/phrases`.
            public var phrases: [Swift.String]
            /// Creates a new `CustomVocabulariesFieldPayload`.
            ///
            /// - Parameters:
            ///   - phrases: Array of phrases not found in normal dictionary. Add technical jargon, proper nouns and uncommon phrases as strings in this array to add them to the lexicon for this job.
            public init(phrases: [Swift.String]) {
                self.phrases = phrases
            }
            public enum CodingKeys: String, CodingKey {
                case phrases
            }
        }
        /// - Remark: Generated from `#/components/schemas/CustomVocabulariesField`.
        public typealias CustomVocabulariesField = [Components.Schemas.CustomVocabulariesFieldPayload]
        /// - Remark: Generated from `#/components/schemas/SubmitJobOptions`.
        public struct SubmitJobOptions: Codable, Hashable, Sendable {
            /// Rev AI Job Options Object Model
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// Optional metadata that was provided during submission
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/metadata`.
                public struct metadataPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/metadata/value1`.
                    public var value1: Components.Schemas.MetadataField
                    /// Creates a new `metadataPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.MetadataField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Optional metadata that was provided during submission
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/metadata`.
                public var metadata: Components.Schemas.SubmitJobOptions.Value1Payload.metadataPayload?
                /// Optional callback url to invoke when processing is complete
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/callback_url`.
                public struct callback_urlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/callback_url/value1`.
                    public var value1: Components.Schemas.CallbackUrlField
                    /// Creates a new `callback_urlPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.CallbackUrlField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Optional callback url to invoke when processing is complete
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/callback_url`.
                public var callback_url: Components.Schemas.SubmitJobOptions.Value1Payload.callback_urlPayload?
                /// Select which service you would like to transcribe this file with.
                ///
                /// | Model        | Description                                                        |
                /// |--------------|--------------------------------------------------------------------|
                /// | `machine`    | the default and routes to our standard model                       |
                /// | `machine_v2` | routes the file to our v2 ASR model                                |
                /// | `human`      | **Rev AI Labs Feature**: routes the file to our human transcribers |
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/transcriber`.
                public struct transcriberPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/transcriber/value1`.
                    public var value1: Components.Schemas.TranscriberField
                    /// Creates a new `transcriberPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.TranscriberField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Select which service you would like to transcribe this file with.
                ///
                /// | Model        | Description                                                        |
                /// |--------------|--------------------------------------------------------------------|
                /// | `machine`    | the default and routes to our standard model                       |
                /// | `machine_v2` | routes the file to our v2 ASR model                                |
                /// | `human`      | **Rev AI Labs Feature**: routes the file to our human transcribers |
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/transcriber`.
                public var transcriber: Components.Schemas.SubmitJobOptions.Value1Payload.transcriberPayload?
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/verbatim`.
                public var verbatim: Components.Schemas.VerbatimField?
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/rush`.
                public var rush: Components.Schemas.RushField?
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/test_mode`.
                public var test_mode: Components.Schemas.TestModeField?
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/segments_to_transcribe`.
                public var segments_to_transcribe: Components.Schemas.SegmentsToTranscribeField?
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/speaker_names`.
                public var speaker_names: Components.Schemas.SpeakerNamesField?
                /// Specify if speaker diarization will be skipped by the speech engine
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/skip_diarization`.
                public struct skip_diarizationPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/skip_diarization/value1`.
                    public var value1: Components.Schemas.OptionalFlagField
                    /// Creates a new `skip_diarizationPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.OptionalFlagField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Specify if speaker diarization will be skipped by the speech engine
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/skip_diarization`.
                public var skip_diarization: Components.Schemas.SubmitJobOptions.Value1Payload.skip_diarizationPayload?
                /// Specify if "punct" type elements will be skipped by the speech engine. For JSON outputs, this includes removing spaces. For text outputs,
                /// words will still be delimited by a space
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/skip_punctuation`.
                public struct skip_punctuationPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/skip_punctuation/value1`.
                    public var value1: Components.Schemas.OptionalFlagField
                    /// Creates a new `skip_punctuationPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.OptionalFlagField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Specify if "punct" type elements will be skipped by the speech engine. For JSON outputs, this includes removing spaces. For text outputs,
                /// words will still be delimited by a space
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/skip_punctuation`.
                public var skip_punctuation: Components.Schemas.SubmitJobOptions.Value1Payload.skip_punctuationPayload?
                /// Currently we only define disfluencies as 'ums' and 'uhs'. When set to true, disfluencies will be not appear in the transcript.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/remove_disfluencies`.
                public struct remove_disfluenciesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/remove_disfluencies/value1`.
                    public var value1: Components.Schemas.OptionalFlagField
                    /// Creates a new `remove_disfluenciesPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.OptionalFlagField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Currently we only define disfluencies as 'ums' and 'uhs'. When set to true, disfluencies will be not appear in the transcript.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/remove_disfluencies`.
                public var remove_disfluencies: Components.Schemas.SubmitJobOptions.Value1Payload.remove_disfluenciesPayload?
                /// Enabling this option will filter for approx. 600 profanities, which cover most use cases. If a transcribed word matches a word on this list, then all the characters of that word will be replaced by asterisks except for the first and last character.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/filter_profanity`.
                public struct filter_profanityPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/filter_profanity/value1`.
                    public var value1: Components.Schemas.OptionalFlagField
                    /// Creates a new `filter_profanityPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.OptionalFlagField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Enabling this option will filter for approx. 600 profanities, which cover most use cases. If a transcribed word matches a word on this list, then all the characters of that word will be replaced by asterisks except for the first and last character.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/filter_profanity`.
                public var filter_profanity: Components.Schemas.SubmitJobOptions.Value1Payload.filter_profanityPayload?
                /// Use to specify the total number of unique speaker channels in the audio.
                ///
                /// Given the number of audio channels provided, each channel will be transcribed
                /// separately and the channel id assigned to the `speaker` label. The final output will be a combination of all individual channel outputs. Overlapping `monologues` will have ordering broken
                /// by the order in which the first spoken `element` of each `monologue` occurs. If `speaker_channels_count` is greater than the actual channels in the audio,
                /// the job will fail with `invalid_media`.
                ///
                /// **Note:**
                ///   - The amount charged will be the duration of the file multiplied by the number of channels specified.
                ///   - When using `speaker_channels_count` each channel will be diarized as one speaker, and the value of `skip_diarization` will be ignored if provided
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/speaker_channels_count`.
                public struct speaker_channels_countPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/speaker_channels_count/value1`.
                    public var value1: Components.Schemas.SpeakerChannelsCountField
                    /// Creates a new `speaker_channels_countPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.SpeakerChannelsCountField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Use to specify the total number of unique speaker channels in the audio.
                ///
                /// Given the number of audio channels provided, each channel will be transcribed
                /// separately and the channel id assigned to the `speaker` label. The final output will be a combination of all individual channel outputs. Overlapping `monologues` will have ordering broken
                /// by the order in which the first spoken `element` of each `monologue` occurs. If `speaker_channels_count` is greater than the actual channels in the audio,
                /// the job will fail with `invalid_media`.
                ///
                /// **Note:**
                ///   - The amount charged will be the duration of the file multiplied by the number of channels specified.
                ///   - When using `speaker_channels_count` each channel will be diarized as one speaker, and the value of `skip_diarization` will be ignored if provided
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/speaker_channels_count`.
                public var speaker_channels_count: Components.Schemas.SubmitJobOptions.Value1Payload.speaker_channels_countPayload?
                /// Specify the number of seconds after job completion when job is auto-deleted. It may take up to 2 minutes after the scheduled time for the job to be deleted.
                /// The number of seconds provided must range from `0` seconds to `2592000` seconds (30 days).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/delete_after_seconds`.
                public struct delete_after_secondsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/delete_after_seconds/value1`.
                    public var value1: Components.Schemas.DeleteAfterSecondsField
                    /// Creates a new `delete_after_secondsPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.DeleteAfterSecondsField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Specify the number of seconds after job completion when job is auto-deleted. It may take up to 2 minutes after the scheduled time for the job to be deleted.
                /// The number of seconds provided must range from `0` seconds to `2592000` seconds (30 days).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/delete_after_seconds`.
                public var delete_after_seconds: Components.Schemas.SubmitJobOptions.Value1Payload.delete_after_secondsPayload?
                /// **This feature is in beta.** You can supply the id of a pre-completed custom vocabulary that you submitted through the [Custom Vocabularies API](https://rev.ai/docs/streaming#operation/SubmitCustomVocabulary) instead of uploading the list of phrases using the `custom_vocabularies` parameter. Using `custom_vocabulary_id` or `custom_vocabularies` with the same list of phrases yields the same transcription result, but `custom_vocabulary_id` allows your submission to finish processing faster by 6 seconds on average.
                ///
                /// You cannot use both `custom_vocabulary_id` and `custom_vocabularies` at the same time, and doing so will result in a 400 response. If the supplied id represents an incomplete, deleted, or non-existent custom vocabulary then you will receive a 404 response.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/custom_vocabulary_id`.
                public struct custom_vocabulary_idPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/custom_vocabulary_id/value1`.
                    public var value1: Components.Schemas.CustomVocabularyIdField
                    /// Creates a new `custom_vocabulary_idPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.CustomVocabularyIdField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// **This feature is in beta.** You can supply the id of a pre-completed custom vocabulary that you submitted through the [Custom Vocabularies API](https://rev.ai/docs/streaming#operation/SubmitCustomVocabulary) instead of uploading the list of phrases using the `custom_vocabularies` parameter. Using `custom_vocabulary_id` or `custom_vocabularies` with the same list of phrases yields the same transcription result, but `custom_vocabulary_id` allows your submission to finish processing faster by 6 seconds on average.
                ///
                /// You cannot use both `custom_vocabulary_id` and `custom_vocabularies` at the same time, and doing so will result in a 400 response. If the supplied id represents an incomplete, deleted, or non-existent custom vocabulary then you will receive a 404 response.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/custom_vocabulary_id`.
                public var custom_vocabulary_id: Components.Schemas.SubmitJobOptions.Value1Payload.custom_vocabulary_idPayload?
                /// Specify a collection of custom vocabulary to be used for this job. Custom vocabulary informs and biases the speech recognition to find those phrases (at the cost of slightly slower transcription).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/custom_vocabularies`.
                public struct custom_vocabulariesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/custom_vocabularies/value1`.
                    public var value1: Components.Schemas.CustomVocabulariesField
                    /// Creates a new `custom_vocabulariesPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.CustomVocabulariesField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// Specify a collection of custom vocabulary to be used for this job. Custom vocabulary informs and biases the speech recognition to find those phrases (at the cost of slightly slower transcription).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/custom_vocabularies`.
                public var custom_vocabularies: Components.Schemas.SubmitJobOptions.Value1Payload.custom_vocabulariesPayload?
                /// `language` is provided as a [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes), with the exception of Mandarin (cmn) which is supplied as an [ISO 639-3 language code](https://en.wikipedia.org/wiki/ISO_639-3).
                ///
                /// Only 1 language can be selected per audio, i.e. no multiple languages in one transcription job.
                /// Additionally, the following parameters may **not** be used with non-English languages: `skip_punctuation`, `remove_disfluencies`, `filter_profanity`, `speaker_channels_count`, `custom_vocabulary_id`.
                ///
                /// You can provide a `language` parameter for transcribing audio in one of the following languages:
                ///
                /// | Language   | ISO 639 Language Code                                |
                /// |------------|-----------------------------------------------|
                /// | Arabic     | ar |
                /// | Bulgarian  | bg |
                /// | Catalan    | ca |
                /// | Croatian   | hr |
                /// | Czech      | cs |
                /// | Danish     | da |
                /// | Dutch      | nl |
                /// | English    | en |
                /// | Farsi (Labs)      | fa |
                /// | Finnish    | fi |
                /// | French     | fr |
                /// | German     | de |
                /// | Greek      | el |
                /// | Hebrew (Labs)     | he |
                /// | Hindi      | hi |
                /// | Hungarian  | hu |
                /// | Indonesian (Labs) | id |
                /// | Italian    | it |
                /// | Japanese   | ja |
                /// | Korean     | ko |
                /// | Lithuanian | lt |
                /// | Latvian    | lv |
                /// | Malay      | ms |
                /// | Mandarin   | cmn |
                /// | Norwegian  | no |
                /// | Polish     | pl |
                /// | Portuguese | pt |
                /// | Romanian   | ro |
                /// | Russian    | ru |
                /// | Slovak     | sk |
                /// | Slovenian  | sl |
                /// | Spanish    | es |
                /// | Swedish    | sv |
                /// | Tamil (Labs)      | ta |
                /// | Telugu (Labs)     | te |
                /// | Turkish    | tr |
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/language`.
                public struct languagePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/language/value1`.
                    public var value1: Components.Schemas.AsyncLanguageField
                    /// Creates a new `languagePayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    public init(value1: Components.Schemas.AsyncLanguageField) {
                        self.value1 = value1
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeToSingleValueContainer(value1)
                    }
                }
                /// `language` is provided as a [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes), with the exception of Mandarin (cmn) which is supplied as an [ISO 639-3 language code](https://en.wikipedia.org/wiki/ISO_639-3).
                ///
                /// Only 1 language can be selected per audio, i.e. no multiple languages in one transcription job.
                /// Additionally, the following parameters may **not** be used with non-English languages: `skip_punctuation`, `remove_disfluencies`, `filter_profanity`, `speaker_channels_count`, `custom_vocabulary_id`.
                ///
                /// You can provide a `language` parameter for transcribing audio in one of the following languages:
                ///
                /// | Language   | ISO 639 Language Code                                |
                /// |------------|-----------------------------------------------|
                /// | Arabic     | ar |
                /// | Bulgarian  | bg |
                /// | Catalan    | ca |
                /// | Croatian   | hr |
                /// | Czech      | cs |
                /// | Danish     | da |
                /// | Dutch      | nl |
                /// | English    | en |
                /// | Farsi (Labs)      | fa |
                /// | Finnish    | fi |
                /// | French     | fr |
                /// | German     | de |
                /// | Greek      | el |
                /// | Hebrew (Labs)     | he |
                /// | Hindi      | hi |
                /// | Hungarian  | hu |
                /// | Indonesian (Labs) | id |
                /// | Italian    | it |
                /// | Japanese   | ja |
                /// | Korean     | ko |
                /// | Lithuanian | lt |
                /// | Latvian    | lv |
                /// | Malay      | ms |
                /// | Mandarin   | cmn |
                /// | Norwegian  | no |
                /// | Polish     | pl |
                /// | Portuguese | pt |
                /// | Romanian   | ro |
                /// | Russian    | ru |
                /// | Slovak     | sk |
                /// | Slovenian  | sl |
                /// | Spanish    | es |
                /// | Swedish    | sv |
                /// | Tamil (Labs)      | ta |
                /// | Telugu (Labs)     | te |
                /// | Turkish    | tr |
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1/language`.
                public var language: Components.Schemas.SubmitJobOptions.Value1Payload.languagePayload?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - metadata: Optional metadata that was provided during submission
                ///   - callback_url: Optional callback url to invoke when processing is complete
                ///   - transcriber: Select which service you would like to transcribe this file with.
                ///   - verbatim:
                ///   - rush:
                ///   - test_mode:
                ///   - segments_to_transcribe:
                ///   - speaker_names:
                ///   - skip_diarization: Specify if speaker diarization will be skipped by the speech engine
                ///   - skip_punctuation: Specify if "punct" type elements will be skipped by the speech engine. For JSON outputs, this includes removing spaces. For text outputs,
                ///   - remove_disfluencies: Currently we only define disfluencies as 'ums' and 'uhs'. When set to true, disfluencies will be not appear in the transcript.
                ///   - filter_profanity: Enabling this option will filter for approx. 600 profanities, which cover most use cases. If a transcribed word matches a word on this list, then all the characters of that word will be replaced by asterisks except for the first and last character.
                ///   - speaker_channels_count: Use to specify the total number of unique speaker channels in the audio.
                ///   - delete_after_seconds: Specify the number of seconds after job completion when job is auto-deleted. It may take up to 2 minutes after the scheduled time for the job to be deleted.
                ///   - custom_vocabulary_id: **This feature is in beta.** You can supply the id of a pre-completed custom vocabulary that you submitted through the [Custom Vocabularies API](https://rev.ai/docs/streaming#operation/SubmitCustomVocabulary) instead of uploading the list of phrases using the `custom_vocabularies` parameter. Using `custom_vocabulary_id` or `custom_vocabularies` with the same list of phrases yields the same transcription result, but `custom_vocabulary_id` allows your submission to finish processing faster by 6 seconds on average.
                ///   - custom_vocabularies: Specify a collection of custom vocabulary to be used for this job. Custom vocabulary informs and biases the speech recognition to find those phrases (at the cost of slightly slower transcription).
                ///   - language: `language` is provided as a [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes), with the exception of Mandarin (cmn) which is supplied as an [ISO 639-3 language code](https://en.wikipedia.org/wiki/ISO_639-3).
                public init(
                    metadata: Components.Schemas.SubmitJobOptions.Value1Payload.metadataPayload? = nil,
                    callback_url: Components.Schemas.SubmitJobOptions.Value1Payload.callback_urlPayload? = nil,
                    transcriber: Components.Schemas.SubmitJobOptions.Value1Payload.transcriberPayload? = nil,
                    verbatim: Components.Schemas.VerbatimField? = nil,
                    rush: Components.Schemas.RushField? = nil,
                    test_mode: Components.Schemas.TestModeField? = nil,
                    segments_to_transcribe: Components.Schemas.SegmentsToTranscribeField? = nil,
                    speaker_names: Components.Schemas.SpeakerNamesField? = nil,
                    skip_diarization: Components.Schemas.SubmitJobOptions.Value1Payload.skip_diarizationPayload? = nil,
                    skip_punctuation: Components.Schemas.SubmitJobOptions.Value1Payload.skip_punctuationPayload? = nil,
                    remove_disfluencies: Components.Schemas.SubmitJobOptions.Value1Payload.remove_disfluenciesPayload? = nil,
                    filter_profanity: Components.Schemas.SubmitJobOptions.Value1Payload.filter_profanityPayload? = nil,
                    speaker_channels_count: Components.Schemas.SubmitJobOptions.Value1Payload.speaker_channels_countPayload? = nil,
                    delete_after_seconds: Components.Schemas.SubmitJobOptions.Value1Payload.delete_after_secondsPayload? = nil,
                    custom_vocabulary_id: Components.Schemas.SubmitJobOptions.Value1Payload.custom_vocabulary_idPayload? = nil,
                    custom_vocabularies: Components.Schemas.SubmitJobOptions.Value1Payload.custom_vocabulariesPayload? = nil,
                    language: Components.Schemas.SubmitJobOptions.Value1Payload.languagePayload? = nil
                ) {
                    self.metadata = metadata
                    self.callback_url = callback_url
                    self.transcriber = transcriber
                    self.verbatim = verbatim
                    self.rush = rush
                    self.test_mode = test_mode
                    self.segments_to_transcribe = segments_to_transcribe
                    self.speaker_names = speaker_names
                    self.skip_diarization = skip_diarization
                    self.skip_punctuation = skip_punctuation
                    self.remove_disfluencies = remove_disfluencies
                    self.filter_profanity = filter_profanity
                    self.speaker_channels_count = speaker_channels_count
                    self.delete_after_seconds = delete_after_seconds
                    self.custom_vocabulary_id = custom_vocabulary_id
                    self.custom_vocabularies = custom_vocabularies
                    self.language = language
                }
                public enum CodingKeys: String, CodingKey {
                    case metadata
                    case callback_url
                    case transcriber
                    case verbatim
                    case rush
                    case test_mode
                    case segments_to_transcribe
                    case speaker_names
                    case skip_diarization
                    case skip_punctuation
                    case remove_disfluencies
                    case filter_profanity
                    case speaker_channels_count
                    case delete_after_seconds
                    case custom_vocabulary_id
                    case custom_vocabularies
                    case language
                }
            }
            /// Rev AI Job Options Object Model
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitJobOptions/value1`.
            public var value1: Components.Schemas.SubmitJobOptions.Value1Payload
            /// Creates a new `SubmitJobOptions`.
            ///
            /// - Parameters:
            ///   - value1: Rev AI Job Options Object Model
            public init(value1: Components.Schemas.SubmitJobOptions.Value1Payload) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubmitJobMediaUrlOptions`.
        public struct SubmitJobMediaUrlOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubmitJobMediaUrlOptions/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// Direct download media url. Ignored if submitting job from file.
                /// **Note:** Media files longer than 17 hours are not supported for English transcription.
                /// Media files longer than 6 hours are not supported for non-English transcription with languages codes `fa`, `he`, `id`, `ta` and `te`.
                /// The other non-English language codes support media files with duration up to 12 hours.
                /// For non-English jobs, expected turnaround time can be up to 6 hours.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitJobMediaUrlOptions/value1/media_url`.
                public var media_url: Swift.String
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - media_url: Direct download media url. Ignored if submitting job from file.
                public init(media_url: Swift.String) {
                    self.media_url = media_url
                }
                public enum CodingKeys: String, CodingKey {
                    case media_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/SubmitJobMediaUrlOptions/value1`.
            public var value1: Components.Schemas.SubmitJobMediaUrlOptions.Value1Payload
            /// - Remark: Generated from `#/components/schemas/SubmitJobMediaUrlOptions/value2`.
            public var value2: Components.Schemas.SubmitJobOptions
            /// Creates a new `SubmitJobMediaUrlOptions`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.SubmitJobMediaUrlOptions.Value1Payload,
                value2: Components.Schemas.SubmitJobOptions
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// Id of the speaker of the monologue.
        ///
        /// - Remark: Generated from `#/components/schemas/SpeakerField`.
        public typealias SpeakerField = Swift.Int
        /// Information about the speaker for this monologue. Null if speaker_names option not provided or no speaker name detected.
        ///
        /// - Remark: Generated from `#/components/schemas/SpeakerInfoField`.
        public struct SpeakerInfoField: Codable, Hashable, Sendable {
            /// Id of the speaker of the monologue
            ///
            /// - Remark: Generated from `#/components/schemas/SpeakerInfoField/id`.
            public var id: Swift.Int?
            /// Human readable name of the speaker that was provided
            ///
            /// - Remark: Generated from `#/components/schemas/SpeakerInfoField/display_name`.
            public var display_name: Swift.String?
            /// Creates a new `SpeakerInfoField`.
            ///
            /// - Parameters:
            ///   - id: Id of the speaker of the monologue
            ///   - display_name: Human readable name of the speaker that was provided
            public init(
                id: Swift.Int? = nil,
                display_name: Swift.String? = nil
            ) {
                self.id = id
                self.display_name = display_name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case display_name
            }
        }
        /// The timestamp of the beginning of the element relative to the beginning of the audio in seconds (centisecond precision).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/TsField`.
        public typealias TsField = Swift.Double
        /// - Remark: Generated from `#/components/schemas/NullableTsField`.
        public struct NullableTsField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NullableTsField/value1`.
            public var value1: Components.Schemas.TsField
            /// Creates a new `NullableTsField`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.TsField) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                value1 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(value1)
            }
        }
        /// The timestamp of the end of the element relative to the beginning of the audio in seconds (centisecond precision).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EndTsField`.
        public typealias EndTsField = Swift.Double
        /// - Remark: Generated from `#/components/schemas/NullableEndTsField`.
        public struct NullableEndTsField: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NullableEndTsField/value1`.
            public var value1: Components.Schemas.EndTsField
            /// Creates a new `NullableEndTsField`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.EndTsField) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                value1 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(value1)
            }
        }
        /// Rev AI Transcript Model
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Transcript`.
        public struct Transcript: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload`.
            public struct monologuesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/speaker`.
                public var speaker: Components.Schemas.SpeakerField?
                /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/speaker_info`.
                public var speaker_info: Components.Schemas.SpeakerInfoField?
                /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elementsPayload`.
                public struct elementsPayloadPayload: Codable, Hashable, Sendable {
                    /// Type of transcript element.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elementsPayload/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                        case punct = "punct"
                        case unknown = "unknown"
                    }
                    /// Type of transcript element.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elementsPayload/type`.
                    public var _type: Components.Schemas.Transcript.monologuesPayloadPayload.elementsPayloadPayload._typePayload?
                    /// Value of the transcript element.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elementsPayload/value`.
                    public var value: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elementsPayload/ts`.
                    public var ts: Components.Schemas.NullableTsField?
                    /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elementsPayload/end_ts`.
                    public var end_ts: Components.Schemas.NullableEndTsField?
                    /// Confidence score of the provided value. If the element `type` is `punct` or `unknown`, confidence will be `null`
                    ///
                    /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elementsPayload/confidence`.
                    public var confidence: Swift.Double?
                    /// Creates a new `elementsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - _type: Type of transcript element.
                    ///   - value: Value of the transcript element.
                    ///   - ts:
                    ///   - end_ts:
                    ///   - confidence: Confidence score of the provided value. If the element `type` is `punct` or `unknown`, confidence will be `null`
                    public init(
                        _type: Components.Schemas.Transcript.monologuesPayloadPayload.elementsPayloadPayload._typePayload? = nil,
                        value: Swift.String? = nil,
                        ts: Components.Schemas.NullableTsField? = nil,
                        end_ts: Components.Schemas.NullableEndTsField? = nil,
                        confidence: Swift.Double? = nil
                    ) {
                        self._type = _type
                        self.value = value
                        self.ts = ts
                        self.end_ts = end_ts
                        self.confidence = confidence
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case value
                        case ts
                        case end_ts
                        case confidence
                    }
                }
                /// Array of transcript elements
                ///
                /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elements`.
                public typealias elementsPayload = [Components.Schemas.Transcript.monologuesPayloadPayload.elementsPayloadPayload]
                /// Array of transcript elements
                ///
                /// - Remark: Generated from `#/components/schemas/Transcript/monologuesPayload/elements`.
                public var elements: Components.Schemas.Transcript.monologuesPayloadPayload.elementsPayload?
                /// Creates a new `monologuesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - speaker:
                ///   - speaker_info:
                ///   - elements: Array of transcript elements
                public init(
                    speaker: Components.Schemas.SpeakerField? = nil,
                    speaker_info: Components.Schemas.SpeakerInfoField? = nil,
                    elements: Components.Schemas.Transcript.monologuesPayloadPayload.elementsPayload? = nil
                ) {
                    self.speaker = speaker
                    self.speaker_info = speaker_info
                    self.elements = elements
                }
                public enum CodingKeys: String, CodingKey {
                    case speaker
                    case speaker_info
                    case elements
                }
            }
            /// - Remark: Generated from `#/components/schemas/Transcript/monologues`.
            public typealias monologuesPayload = [Components.Schemas.Transcript.monologuesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Transcript/monologues`.
            public var monologues: Components.Schemas.Transcript.monologuesPayload?
            /// Creates a new `Transcript`.
            ///
            /// - Parameters:
            ///   - monologues:
            public init(monologues: Components.Schemas.Transcript.monologuesPayload? = nil) {
                self.monologues = monologues
            }
            public enum CodingKeys: String, CodingKey {
                case monologues
            }
        }
        /// Rev AI Account Model
        ///
        /// - Remark: Generated from `#/components/schemas/Account`.
        public struct Account: Codable, Hashable, Sendable {
            /// Email of developer account
            ///
            /// - Remark: Generated from `#/components/schemas/Account/email`.
            public var email: Swift.String?
            /// Amount of Rev AI API credits remaining in seconds
            ///
            /// - Remark: Generated from `#/components/schemas/Account/balance_seconds`.
            public var balance_seconds: Swift.Int?
            /// Creates a new `Account`.
            ///
            /// - Parameters:
            ///   - email: Email of developer account
            ///   - balance_seconds: Amount of Rev AI API credits remaining in seconds
            public init(
                email: Swift.String? = nil,
                balance_seconds: Swift.Int? = nil
            ) {
                self.email = email
                self.balance_seconds = balance_seconds
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case balance_seconds
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// Rev AI API Job Id
        ///
        /// - Remark: Generated from `#/components/parameters/JobId`.
        public typealias JobId = Swift.String
        /// Limits the number of jobs returned, default is 100, max is 1000
        ///
        /// - Remark: Generated from `#/components/parameters/JobListLimit`.
        public typealias JobListLimit = Swift.Int
        /// If specified, returns jobs submitted before the job with this id, exclusive (job with this id is not included)
        ///
        /// - Remark: Generated from `#/components/parameters/JobListStartingAfter`.
        public typealias JobListStartingAfter = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct Unauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Unauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application_problem_plus_json`.
                public struct application_problem_plus_jsonPayload: Codable, Hashable, Sendable {
                    /// Short, human-readable summary of the problem type
                    ///
                    /// - Remark: Generated from `#/components/responses/Unauthorized/content/application_problem_plus_json/title`.
                    public var title: Swift.String?
                    /// HTTP status code of the error
                    ///
                    /// - Remark: Generated from `#/components/responses/Unauthorized/content/application_problem_plus_json/status`.
                    public var status: Swift.Int?
                    /// Creates a new `application_problem_plus_jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: Short, human-readable summary of the problem type
                    ///   - status: HTTP status code of the error
                    public init(
                        title: Swift.String? = nil,
                        status: Swift.Int? = nil
                    ) {
                        self.title = title
                        self.status = status
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case status
                    }
                }
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/problem+json`.
                case application_problem_plus_json(Components.Responses.Unauthorized.Body.application_problem_plus_jsonPayload)
                /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                /// - SeeAlso: `.application_problem_plus_json`.
                public var application_problem_plus_json: Components.Responses.Unauthorized.Body.application_problem_plus_jsonPayload {
                    get throws {
                        switch self {
                        case let .application_problem_plus_json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.Unauthorized.Body
            /// Creates a new `Unauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.Unauthorized.Body) {
                self.body = body
            }
        }
        public struct JobNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/JobNotFound/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/JobNotFound/content/application\/problem+json`.
                case application_problem_plus_json(Components.Schemas.BaseProblemDetails)
                /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                /// - SeeAlso: `.application_problem_plus_json`.
                public var application_problem_plus_json: Components.Schemas.BaseProblemDetails {
                    get throws {
                        switch self {
                        case let .application_problem_plus_json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.JobNotFound.Body
            /// Creates a new `JobNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.JobNotFound.Body) {
                self.body = body
            }
        }
        public struct DeleteJobSuccessful: Sendable, Hashable {
            /// Creates a new `DeleteJobSuccessful`.
            public init() {}
        }
        public struct PayloadTooLarge: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PayloadTooLarge/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PayloadTooLarge/content/application_problem_plus_json`.
                public struct application_problem_plus_jsonPayload: Codable, Hashable, Sendable {
                    /// Short, human-readable summary of the problem type
                    ///
                    /// - Remark: Generated from `#/components/responses/PayloadTooLarge/content/application_problem_plus_json/title`.
                    public var title: Swift.String?
                    /// Human-readable explanation specific to this occurrence of the problem
                    ///
                    /// - Remark: Generated from `#/components/responses/PayloadTooLarge/content/application_problem_plus_json/detail`.
                    public var detail: Swift.String?
                    /// HTTP status code of the error
                    ///
                    /// - Remark: Generated from `#/components/responses/PayloadTooLarge/content/application_problem_plus_json/status`.
                    public var status: Swift.Int?
                    /// Creates a new `application_problem_plus_jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: Short, human-readable summary of the problem type
                    ///   - detail: Human-readable explanation specific to this occurrence of the problem
                    ///   - status: HTTP status code of the error
                    public init(
                        title: Swift.String? = nil,
                        detail: Swift.String? = nil,
                        status: Swift.Int? = nil
                    ) {
                        self.title = title
                        self.detail = detail
                        self.status = status
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case detail
                        case status
                    }
                }
                /// - Remark: Generated from `#/components/responses/PayloadTooLarge/content/application\/problem+json`.
                case application_problem_plus_json(Components.Responses.PayloadTooLarge.Body.application_problem_plus_jsonPayload)
                /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                /// - SeeAlso: `.application_problem_plus_json`.
                public var application_problem_plus_json: Components.Responses.PayloadTooLarge.Body.application_problem_plus_jsonPayload {
                    get throws {
                        switch self {
                        case let .application_problem_plus_json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PayloadTooLarge.Body
            /// Creates a new `PayloadTooLarge`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PayloadTooLarge.Body) {
                self.body = body
            }
        }
        public struct InvalidTranscriptFormat: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application_problem_plus_json`.
                public struct application_problem_plus_jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application_problem_plus_json/value1`.
                    public var value1: Components.Schemas.BaseProblemDetails
                    /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application_problem_plus_json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Value passed in given request
                        ///
                        /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application_problem_plus_json/value2/current_value`.
                        public var current_value: Swift.String?
                        /// Allowed values for this request
                        ///
                        /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application_problem_plus_json/value2/allowed_values`.
                        public var allowed_values: [Swift.String]?
                        /// Human-readable explanation specific to this occurrence of the problem
                        ///
                        /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application_problem_plus_json/value2/detail`.
                        public var detail: Swift.String?
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - current_value: Value passed in given request
                        ///   - allowed_values: Allowed values for this request
                        ///   - detail: Human-readable explanation specific to this occurrence of the problem
                        public init(
                            current_value: Swift.String? = nil,
                            allowed_values: [Swift.String]? = nil,
                            detail: Swift.String? = nil
                        ) {
                            self.current_value = current_value
                            self.allowed_values = allowed_values
                            self.detail = detail
                        }
                        public enum CodingKeys: String, CodingKey {
                            case current_value
                            case allowed_values
                            case detail
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application_problem_plus_json/value2`.
                    public var value2: Components.Responses.InvalidTranscriptFormat.Body.application_problem_plus_jsonPayload.Value2Payload
                    /// Creates a new `application_problem_plus_jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.BaseProblemDetails,
                        value2: Components.Responses.InvalidTranscriptFormat.Body.application_problem_plus_jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/InvalidTranscriptFormat/content/application\/problem+json`.
                case application_problem_plus_json(Components.Responses.InvalidTranscriptFormat.Body.application_problem_plus_jsonPayload)
                /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                /// - SeeAlso: `.application_problem_plus_json`.
                public var application_problem_plus_json: Components.Responses.InvalidTranscriptFormat.Body.application_problem_plus_jsonPayload {
                    get throws {
                        switch self {
                        case let .application_problem_plus_json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InvalidTranscriptFormat.Body
            /// Creates a new `InvalidTranscriptFormat`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InvalidTranscriptFormat.Body) {
                self.body = body
            }
        }
        public struct InvalidJobPropertyCaptions: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InvalidJobPropertyCaptions/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InvalidJobPropertyCaptions/content/application_problem_plus_json`.
                public struct application_problem_plus_jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/InvalidJobPropertyCaptions/content/application_problem_plus_json/value1`.
                    public var value1: Components.Schemas.BaseProblemDetails
                    /// - Remark: Generated from `#/components/responses/InvalidJobPropertyCaptions/content/application_problem_plus_json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Human-readable explanation specific to this occurrence of the problem
                        ///
                        /// - Remark: Generated from `#/components/responses/InvalidJobPropertyCaptions/content/application_problem_plus_json/value2/detail`.
                        public var detail: Swift.String?
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - detail: Human-readable explanation specific to this occurrence of the problem
                        public init(detail: Swift.String? = nil) {
                            self.detail = detail
                        }
                        public enum CodingKeys: String, CodingKey {
                            case detail
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/InvalidJobPropertyCaptions/content/application_problem_plus_json/value2`.
                    public var value2: Components.Responses.InvalidJobPropertyCaptions.Body.application_problem_plus_jsonPayload.Value2Payload
                    /// Creates a new `application_problem_plus_jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.BaseProblemDetails,
                        value2: Components.Responses.InvalidJobPropertyCaptions.Body.application_problem_plus_jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/InvalidJobPropertyCaptions/content/application\/problem+json`.
                case application_problem_plus_json(Components.Responses.InvalidJobPropertyCaptions.Body.application_problem_plus_jsonPayload)
                /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                /// - SeeAlso: `.application_problem_plus_json`.
                public var application_problem_plus_json: Components.Responses.InvalidJobPropertyCaptions.Body.application_problem_plus_jsonPayload {
                    get throws {
                        switch self {
                        case let .application_problem_plus_json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InvalidJobPropertyCaptions.Body
            /// Creates a new `InvalidJobPropertyCaptions`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InvalidJobPropertyCaptions.Body) {
                self.body = body
            }
        }
        public struct InvalidCaptionFormat: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application_problem_plus_json`.
                public struct application_problem_plus_jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application_problem_plus_json/value1`.
                    public var value1: Components.Schemas.BaseProblemDetails
                    /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application_problem_plus_json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Value passed in given request
                        ///
                        /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application_problem_plus_json/value2/current_value`.
                        public var current_value: Swift.String?
                        /// Allowed values for this request
                        ///
                        /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application_problem_plus_json/value2/allowed_values`.
                        public var allowed_values: [Swift.String]?
                        /// Human-readable explanation specific to this occurrence of the problem
                        ///
                        /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application_problem_plus_json/value2/detail`.
                        public var detail: Swift.String?
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - current_value: Value passed in given request
                        ///   - allowed_values: Allowed values for this request
                        ///   - detail: Human-readable explanation specific to this occurrence of the problem
                        public init(
                            current_value: Swift.String? = nil,
                            allowed_values: [Swift.String]? = nil,
                            detail: Swift.String? = nil
                        ) {
                            self.current_value = current_value
                            self.allowed_values = allowed_values
                            self.detail = detail
                        }
                        public enum CodingKeys: String, CodingKey {
                            case current_value
                            case allowed_values
                            case detail
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application_problem_plus_json/value2`.
                    public var value2: Components.Responses.InvalidCaptionFormat.Body.application_problem_plus_jsonPayload.Value2Payload
                    /// Creates a new `application_problem_plus_jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.BaseProblemDetails,
                        value2: Components.Responses.InvalidCaptionFormat.Body.application_problem_plus_jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/InvalidCaptionFormat/content/application\/problem+json`.
                case application_problem_plus_json(Components.Responses.InvalidCaptionFormat.Body.application_problem_plus_jsonPayload)
                /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                /// - SeeAlso: `.application_problem_plus_json`.
                public var application_problem_plus_json: Components.Responses.InvalidCaptionFormat.Body.application_problem_plus_jsonPayload {
                    get throws {
                        switch self {
                        case let .application_problem_plus_json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InvalidCaptionFormat.Body
            /// Creates a new `InvalidCaptionFormat`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InvalidCaptionFormat.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get Job By Id
    ///
    /// Returns information about a transcription job
    ///
    /// - Remark: HTTP `GET /jobs/{id}`.
    /// - Remark: Generated from `#/paths//jobs/{id}/get(GetJobById)`.
    public enum GetJobById {
        public static let id: Swift.String = "GetJobById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/jobs/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Rev AI API Job Id
                ///
                /// - Remark: Generated from `#/paths/jobs/{id}/GET/path/id`.
                public var id: Components.Parameters.JobId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Rev AI API Job Id
                public init(id: Components.Parameters.JobId) {
                    self.id = id
                }
            }
            public var path: Operations.GetJobById.Input.Path
            /// - Remark: Generated from `#/paths/jobs/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetJobById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetJobById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetJobById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetJobById.Input.Path,
                headers: Operations.GetJobById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AsyncTranscriptionJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AsyncTranscriptionJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetJobById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetJobById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Transcription Job Details
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/get(GetJobById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetJobById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetJobById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Request Unauthorized
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/get(GetJobById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Job Not Found
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/get(GetJobById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.JobNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.JobNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Delete Job by Id
    ///
    /// Deletes a transcription job. All data related to the job, such as input media and transcript, will be permanently deleted. A job can only be deleted once it's completed (either with success or failure).
    ///
    /// - Remark: HTTP `DELETE /jobs/{id}`.
    /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)`.
    public enum DeleteJobById {
        public static let id: Swift.String = "DeleteJobById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/jobs/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Rev AI API Job Id
                ///
                /// - Remark: Generated from `#/paths/jobs/{id}/DELETE/path/id`.
                public var id: Components.Parameters.JobId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Rev AI API Job Id
                public init(id: Components.Parameters.JobId) {
                    self.id = id
                }
            }
            public var path: Operations.DeleteJobById.Input.Path
            /// - Remark: Generated from `#/paths/jobs/{id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteJobById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteJobById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteJobById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteJobById.Input.Path,
                headers: Operations.DeleteJobById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Job was successfully deleted
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.DeleteJobSuccessful)
            /// Job was successfully deleted
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.DeleteJobSuccessful {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Request Unauthorized
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Job Not Found
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.JobNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.JobNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/{id}/DELETE/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/{id}/DELETE/responses/409/content/application\/problem+json`.
                    case application_problem_plus_json(Components.Schemas.InvalidStateDetails)
                    /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                    ///
                    /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                    /// - SeeAlso: `.application_problem_plus_json`.
                    public var application_problem_plus_json: Components.Schemas.InvalidStateDetails {
                        get throws {
                            switch self {
                            case let .application_problem_plus_json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteJobById.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteJobById.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/delete(DeleteJobById)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.DeleteJobById.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.DeleteJobById.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case application_problem_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Get List of Jobs
    ///
    /// Gets a list of transcription jobs submitted within the last 30 days in reverse chronological order up to the provided `limit` number of jobs per call. **Note:** Jobs older than 30 days will not be listed. Pagination is supported via passing the last job `id` from a previous call into `starting_after`.
    ///
    /// - Remark: HTTP `GET /jobs`.
    /// - Remark: Generated from `#/paths//jobs/get(GetListOfJobs)`.
    public enum GetListOfJobs {
        public static let id: Swift.String = "GetListOfJobs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/jobs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Limits the number of jobs returned, default is 100, max is 1000
                ///
                /// - Remark: Generated from `#/paths/jobs/GET/query/limit`.
                public var limit: Components.Parameters.JobListLimit?
                /// If specified, returns jobs submitted before the job with this id, exclusive (job with this id is not included)
                ///
                /// - Remark: Generated from `#/paths/jobs/GET/query/starting_after`.
                public var starting_after: Components.Parameters.JobListStartingAfter?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: Limits the number of jobs returned, default is 100, max is 1000
                ///   - starting_after: If specified, returns jobs submitted before the job with this id, exclusive (job with this id is not included)
                public init(
                    limit: Components.Parameters.JobListLimit? = nil,
                    starting_after: Components.Parameters.JobListStartingAfter? = nil
                ) {
                    self.limit = limit
                    self.starting_after = starting_after
                }
            }
            public var query: Operations.GetListOfJobs.Input.Query
            /// - Remark: Generated from `#/paths/jobs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetListOfJobs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetListOfJobs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetListOfJobs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetListOfJobs.Input.Query = .init(),
                headers: Operations.GetListOfJobs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AsyncTranscriptionJob])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AsyncTranscriptionJob] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetListOfJobs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetListOfJobs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of Rev AI Transcription Jobs
            ///
            /// - Remark: Generated from `#/paths//jobs/get(GetListOfJobs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetListOfJobs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetListOfJobs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.BadRequestProblemDetails)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BadRequestProblemDetails {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetListOfJobs.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetListOfJobs.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//jobs/get(GetListOfJobs)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.GetListOfJobs.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.GetListOfJobs.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Request Unauthorized
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/get(GetListOfJobs)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Submit Transcription Job
    ///
    /// Starts an asynchronous job to transcribe speech-to-text for a media file. Media files can be specified in two ways, either by including a public url to the media in the transcription job `options` or by uploading a local file as part of a multipart/form request.
    ///
    /// - Remark: HTTP `POST /jobs`.
    /// - Remark: Generated from `#/paths//jobs/post(SubmitTranscriptionJob)`.
    public enum SubmitTranscriptionJob {
        public static let id: Swift.String = "SubmitTranscriptionJob"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/jobs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SubmitTranscriptionJob.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SubmitTranscriptionJob.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SubmitTranscriptionJob.Input.Headers
            /// - Remark: Generated from `#/paths/jobs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SubmitJobMediaUrlOptions)
                /// - Remark: Generated from `#/paths/jobs/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/POST/requestBody/multipartForm/media`.
                    public struct mediaPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `mediaPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case media(OpenAPIRuntime.MultipartPart<Operations.SubmitTranscriptionJob.Input.Body.multipartFormPayload.mediaPayload>)
                    /// - Remark: Generated from `#/paths/jobs/POST/requestBody/multipartForm/options`.
                    public struct optionsPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/paths/jobs/POST/requestBody/multipartForm/options/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/jobs/POST/requestBody/multipartForm/options/content/body/value1`.
                            public var value1: Components.Schemas.SubmitJobOptions
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            public init(value1: Components.Schemas.SubmitJobOptions) {
                                self.value1 = value1
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                            }
                        }
                        public var body: Operations.SubmitTranscriptionJob.Input.Body.multipartFormPayload.optionsPayload.bodyPayload?
                        /// Creates a new `optionsPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Operations.SubmitTranscriptionJob.Input.Body.multipartFormPayload.optionsPayload.bodyPayload? = nil) {
                            self.body = body
                        }
                    }
                    case options(OpenAPIRuntime.MultipartPart<Operations.SubmitTranscriptionJob.Input.Body.multipartFormPayload.optionsPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/jobs/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.SubmitTranscriptionJob.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.SubmitTranscriptionJob.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.SubmitTranscriptionJob.Input.Headers = .init(),
                body: Operations.SubmitTranscriptionJob.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AsyncTranscriptionJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AsyncTranscriptionJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SubmitTranscriptionJob.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SubmitTranscriptionJob.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Transcription Job Details
            ///
            /// - Remark: Generated from `#/paths//jobs/post(SubmitTranscriptionJob)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SubmitTranscriptionJob.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SubmitTranscriptionJob.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/POST/responses/400/content/application\/problem+json`.
                    case application_problem_plus_json(Components.Schemas.BadRequestProblemDetails)
                    /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                    ///
                    /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                    /// - SeeAlso: `.application_problem_plus_json`.
                    public var application_problem_plus_json: Components.Schemas.BadRequestProblemDetails {
                        get throws {
                            switch self {
                            case let .application_problem_plus_json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SubmitTranscriptionJob.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SubmitTranscriptionJob.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//jobs/post(SubmitTranscriptionJob)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.SubmitTranscriptionJob.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.SubmitTranscriptionJob.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Request Unauthorized
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/post(SubmitTranscriptionJob)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Payload Too Large
            /// ***
            /// Only returned when job is submitted using a local file as part of `multipart/form-data`. Use a `media_url`
            /// for files larger than 2GBs
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/post(SubmitTranscriptionJob)/responses/413`.
            ///
            /// HTTP response code: `413 contentTooLarge`.
            case contentTooLarge(Components.Responses.PayloadTooLarge)
            /// The associated value of the enum case if `self` is `.contentTooLarge`.
            ///
            /// - Throws: An error if `self` is not `.contentTooLarge`.
            /// - SeeAlso: `.contentTooLarge`.
            public var contentTooLarge: Components.Responses.PayloadTooLarge {
                get throws {
                    switch self {
                    case let .contentTooLarge(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "contentTooLarge",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Get Transcript By Id
    ///
    /// Returns the transcript for a completed transcription job. Transcript can be returned as either JSON or plaintext format. Transcript output format can be specified in the `Accept` header. Returns JSON by default.
    /// ***
    /// Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete transcript. This is rare, but not impossible. To guarantee 100% completeness, we recommend capturing all final hypothesis when you receive them on the client.
    ///
    ///
    /// - Remark: HTTP `GET /jobs/{id}/transcript`.
    /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)`.
    public enum GetTranscriptById {
        public static let id: Swift.String = "GetTranscriptById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Rev AI API Job Id
                ///
                /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/path/id`.
                public var id: Components.Parameters.JobId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Rev AI API Job Id
                public init(id: Components.Parameters.JobId) {
                    self.id = id
                }
            }
            public var path: Operations.GetTranscriptById.Input.Path
            /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTranscriptById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTranscriptById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetTranscriptById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetTranscriptById.Input.Path,
                headers: Operations.GetTranscriptById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/responses/200/content/application\/vnd.rev.transcript.v1.0+json`.
                    case application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json(Components.Schemas.Transcript)
                    /// The associated value of the enum case if `self` is `.application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json`.
                    ///
                    /// - Throws: An error if `self` is not `.application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json`.
                    /// - SeeAlso: `.application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json`.
                    public var application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json: Components.Schemas.Transcript {
                        get throws {
                            switch self {
                            case let .application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/vnd.rev.transcript.v1.0+json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    public var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetTranscriptById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetTranscriptById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Rev AI API Transcript
            /// ***
            /// Note: Transcript output format is required in the Accept header. Output can either be in Rev's JSON format or plaintext.
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTranscriptById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetTranscriptById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Request Unauthorized
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Job Not Found
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.JobNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.JobNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Invalid Transcript Format
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)/responses/406`.
            ///
            /// HTTP response code: `406 notAcceptable`.
            case notAcceptable(Components.Responses.InvalidTranscriptFormat)
            /// The associated value of the enum case if `self` is `.notAcceptable`.
            ///
            /// - Throws: An error if `self` is not `.notAcceptable`.
            /// - SeeAlso: `.notAcceptable`.
            public var notAcceptable: Components.Responses.InvalidTranscriptFormat {
                get throws {
                    switch self {
                    case let .notAcceptable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notAcceptable",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/{id}/transcript/GET/responses/409/content/application\/problem+json`.
                    case application_problem_plus_json(Components.Schemas.InvalidStateDetails)
                    /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                    ///
                    /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                    /// - SeeAlso: `.application_problem_plus_json`.
                    public var application_problem_plus_json: Components.Schemas.InvalidStateDetails {
                        get throws {
                            switch self {
                            case let .application_problem_plus_json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetTranscriptById.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetTranscriptById.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/transcript/get(GetTranscriptById)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.GetTranscriptById.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.GetTranscriptById.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json
            case plainText
            case application_problem_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/vnd.rev.transcript.v1.0+json":
                    self = .application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json
                case "text/plain":
                    self = .plainText
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json:
                    return "application/vnd.rev.transcript.v1.0+json"
                case .plainText:
                    return "text/plain"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .application_vnd_period_rev_period_transcript_period_v1_period_0_plus_json,
                    .plainText,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Get Captions
    ///
    /// Returns the caption output for a transcription job. We currently support SubRip (SRT) and Web Video Text Tracks (VTT) output.
    /// Caption output format can be specified in the `Accept` header. Returns SRT by default.
    /// ***
    /// Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete caption file. This is rare, but not impossible.
    ///
    ///
    /// - Remark: HTTP `GET /jobs/{id}/captions`.
    /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)`.
    public enum GetCaptions {
        public static let id: Swift.String = "GetCaptions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Rev AI API Job Id
                ///
                /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/path/id`.
                public var id: Components.Parameters.JobId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Rev AI API Job Id
                public init(id: Components.Parameters.JobId) {
                    self.id = id
                }
            }
            public var path: Operations.GetCaptions.Input.Path
            /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifies which channel of the job output to caption. Default is `null` which works only for jobs with no `speaker_channels_count` provided during job submission.
                ///
                /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/query/speaker_channel`.
                public var speaker_channel: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - speaker_channel: Identifies which channel of the job output to caption. Default is `null` which works only for jobs with no `speaker_channels_count` provided during job submission.
                public init(speaker_channel: Swift.Int? = nil) {
                    self.speaker_channel = speaker_channel
                }
            }
            public var query: Operations.GetCaptions.Input.Query
            /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetCaptions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetCaptions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetCaptions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.GetCaptions.Input.Path,
                query: Operations.GetCaptions.Input.Query = .init(),
                headers: Operations.GetCaptions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/responses/200/content/application\/x-subrip`.
                    case application_x_hyphen_subrip(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_subrip`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_subrip`.
                    /// - SeeAlso: `.application_x_hyphen_subrip`.
                    public var application_x_hyphen_subrip: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_subrip(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-subrip",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/responses/200/content/text\/vtt`.
                    case text_vtt(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_vtt`.
                    ///
                    /// - Throws: An error if `self` is not `.text_vtt`.
                    /// - SeeAlso: `.text_vtt`.
                    public var text_vtt: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_vtt(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/vtt",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetCaptions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetCaptions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Rev AI API Captions
            /// ***
            /// Note: Caption output format is required in the Accept header. The supported headers are `application/x-subrip` and `text/vtt`.
            /// ([SRT](https://en.wikipedia.org/wiki/SubRip))
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetCaptions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetCaptions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Request Unauthorized
            ///
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Job Not Found
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.JobNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.JobNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Invalid Job Property
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)/responses/405`.
            ///
            /// HTTP response code: `405 methodNotAllowed`.
            case methodNotAllowed(Components.Responses.InvalidJobPropertyCaptions)
            /// The associated value of the enum case if `self` is `.methodNotAllowed`.
            ///
            /// - Throws: An error if `self` is not `.methodNotAllowed`.
            /// - SeeAlso: `.methodNotAllowed`.
            public var methodNotAllowed: Components.Responses.InvalidJobPropertyCaptions {
                get throws {
                    switch self {
                    case let .methodNotAllowed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "methodNotAllowed",
                            response: self
                        )
                    }
                }
            }
            /// Invalid Caption Format
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)/responses/406`.
            ///
            /// HTTP response code: `406 notAcceptable`.
            case notAcceptable(Components.Responses.InvalidCaptionFormat)
            /// The associated value of the enum case if `self` is `.notAcceptable`.
            ///
            /// - Throws: An error if `self` is not `.notAcceptable`.
            /// - SeeAlso: `.notAcceptable`.
            public var notAcceptable: Components.Responses.InvalidCaptionFormat {
                get throws {
                    switch self {
                    case let .notAcceptable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notAcceptable",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/jobs/{id}/captions/GET/responses/409/content/application\/problem+json`.
                    case application_problem_plus_json(Components.Schemas.InvalidStateDetails)
                    /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                    ///
                    /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                    /// - SeeAlso: `.application_problem_plus_json`.
                    public var application_problem_plus_json: Components.Schemas.InvalidStateDetails {
                        get throws {
                            switch self {
                            case let .application_problem_plus_json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetCaptions.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetCaptions.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//jobs/{id}/captions/get(GetCaptions)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.GetCaptions.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.GetCaptions.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case application_x_hyphen_subrip
            case text_vtt
            case application_problem_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/x-subrip":
                    self = .application_x_hyphen_subrip
                case "text/vtt":
                    self = .text_vtt
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_x_hyphen_subrip:
                    return "application/x-subrip"
                case .text_vtt:
                    return "text/vtt"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .application_x_hyphen_subrip,
                    .text_vtt,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Get Account
    ///
    /// Get the developer's account information
    ///
    /// - Remark: HTTP `GET /account`.
    /// - Remark: Generated from `#/paths//account/get(GetAccount)`.
    public enum GetAccount {
        public static let id: Swift.String = "GetAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetAccount.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Account)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Account {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Rev AI Account
            ///
            /// - Remark: Generated from `#/paths//account/get(GetAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Request Unauthorized
            ///
            ///
            /// - Remark: Generated from `#/paths//account/get(GetAccount)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
}
